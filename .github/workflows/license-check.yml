name: "License Check"

on:
  workflow_call:
    inputs:
      pull-request-target:
        required: true
        type: boolean
        default: true
      issue-comment:
        required: true
        type: boolean
        default: true

jobs:
  check-and-trigger:
    if: |
      (github.event_name == 'pull_request_target' && inputs.pull-request-target) ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && inputs.issue-comment)
    runs-on: ubuntu-latest
    steps:
      - name: Debug Event Context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Pull request target input: ${{ inputs.pull-request-target }}"
          echo "Issue comment input: ${{ inputs.issue-comment }}"
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "Comment body: ${{ github.event.comment.body }}"
          fi

      - name: Initialize workflow state
        id: init
        run: |
          is_comment="${{ github.event_name == 'issue_comment' }}"
          echo "is_comment=$is_comment" >> "$GITHUB_OUTPUT"

          if [[ "$is_comment" == "true" ]]; then
            comment="${{ github.event.comment.body }}"
            if [[ "$comment" == "recheck" || "$comment" == "I have read the CLA Document and I hereby sign the CLA" ]]; then
              echo "is_cla_command=true" >> "$GITHUB_OUTPUT"
            else
              echo "is_cla_command=false" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Checkout code (for pull requests)
        if: steps.init.outputs.is_comment != 'true'  # Treat as string
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}

      - name: Checkout Org .github Repo (for pull requests)
        if: steps.init.outputs.is_comment != 'true'  # Treat as string
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/.github
          path: .github-org

      - name: Check license (for pull requests)
        if: steps.init.outputs.is_comment != 'true'  # Treat as string
        id: license_check
        run: |
          if [[ ! -f ".github-org/permissive_licenses.json" ]]; then
            echo "Error: Required file permissive_licenses.json not found"
            exit 1
          fi

          license_file=$(find . -maxdepth 1 -type f -iname 'license*' -o -iname 'copying*' | head -n 1)
          if [[ -n "$license_file" ]]; then
            pattern=$(jq -r '.permissive[]' ".github-org/permissive_licenses.json" | while read -r license; do 
              echo "\b${license}\b"
            done | paste -sd '|')
            if head -n 20 "$license_file" | grep -q -E "$pattern"; then
              echo "needs_cla=false" >> "$GITHUB_OUTPUT"
            else
              echo "needs_cla=true" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "needs_cla=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Evaluate CLA conditions
        id: cla_eval
        run: |
          should_run_cla="false"
          if [[ "${{ steps.init.outputs.is_comment }}" == "true" && "${{ steps.init.outputs.is_cla_command }}" == "true" ]]; then
            echo "Debug: Should run CLA due to valid comment command"
            should_run_cla="true"
          elif [[ "${{ steps.init.outputs.is_comment }}" != "true" && "${{ steps.license_check.outputs.needs_cla }}" == "true" ]]; then
            echo "Debug: Should run CLA due to license check"
            should_run_cla="true"
          fi
          echo "should_run_cla=$should_run_cla" >> "$GITHUB_OUTPUT"

      - name: Call CLA Workflow
        if: steps.cla_eval.outputs.should_run_cla == 'true'  # Treat as string
        uses: contributor-assistant/github-action@v2.6.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          path-to-signatures: 'signatures/version1/cla.json'
          path-to-document: 'https://github.com/cla-assistant/github-action/blob/master/SAPCLA.md'
          branch: 'main'
          allowlist: user1,bot*
          remote-repository-name: .github
          signed-commit-message: '${{ github.actor }} has signed the CLA in ${{ github.repository_owner }}/${{ github.repository }}#${{ github.event.pull_request }}'
          custom-notsigned-prcomment: 'All non-permissive licensed projects require a signed CLA--please read and sign our CLA: $pathToCLADocument'
          custom-pr-sign-comment: '${{ github.event.pull_request.user.login }} have read the Developer Terms Document and I hereby accept the Terms'
          
